"""
PDF generation utilities for the Smart News Recommendation System.
Creates downloadable PDF reports of recommended articles.
"""

import os
from datetime import datetime
try:
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

def generate_pdf_from_articles(articles, user_id="guest", filename=None):
    """
    Generate a PDF report from a list of article recommendations.
    
    Args:
        articles (list): List of article dictionaries with keys: title, abstract, category, etc.
        user_id (str): User ID for personalization
        filename (str): Output filename (optional)
    
    Returns:
        str: Path to the generated PDF file
    """
    
    if not REPORTLAB_AVAILABLE:
        # Fallback: create a simple text file if reportlab is not available
        return generate_text_report(articles, user_id, filename)
    
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"news_recommendations_{user_id}_{timestamp}.pdf"
    
    # Ensure the filename has .pdf extension
    if not filename.endswith('.pdf'):
        filename += '.pdf'
    
    # Create a temporary directory if it doesn't exist
    temp_dir = os.path.join(os.path.dirname(__file__), '..', 'temp')
    os.makedirs(temp_dir, exist_ok=True)
    
    filepath = os.path.join(temp_dir, filename)
    
    try:
        # Create the PDF document
        doc = SimpleDocTemplate(filepath, pagesize=A4, 
                              rightMargin=72, leftMargin=72,
                              topMargin=72, bottomMargin=18)
        
        # Define styles
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            textColor=colors.darkblue,
            alignment=1  # Center alignment
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=12,
            spaceAfter=6,
            textColor=colors.darkgreen
        )
        
        body_style = ParagraphStyle(
            'CustomBody',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=12
        )
        
        # Build the content
        content = []
        
        # Title
        title = Paragraph(f"ðŸ“° News Recommendations for {user_id}", title_style)
        content.append(title)
        
        # Timestamp
        timestamp = Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", body_style)
        content.append(timestamp)
        content.append(Spacer(1, 20))
        
        # Articles
        for i, article in enumerate(articles, 1):
            # Article number and title
            article_title = article.get('title', 'No Title Available')
            title_para = Paragraph(f"{i}. {article_title}", heading_style)
            content.append(title_para)
            
            # Category info
            category = article.get('category', 'Unknown')
            subcategory = article.get('subcategory', 'Unknown')
            category_para = Paragraph(f"<b>Category:</b> {category} / {subcategory}", body_style)
            content.append(category_para)
            
            # Abstract
            abstract = article.get('abstract', 'No abstract available.')
            # Clean up the abstract for PDF
            abstract = abstract.replace('<', '&lt;').replace('>', '&gt;')
            abstract_para = Paragraph(f"<b>Summary:</b> {abstract}", body_style)
            content.append(abstract_para)
            
            # Add spacing between articles
            content.append(Spacer(1, 15))
            
            # Add page break after every 3 articles to avoid overcrowding
            if i % 3 == 0 and i < len(articles):
                content.append(PageBreak())
        
        # Footer
        footer = Paragraph("Generated by Smart News Recommendation System", body_style)
        content.append(Spacer(1, 30))
        content.append(footer)
        
        # Build the PDF
        doc.build(content)
        
        return filepath
        
    except Exception as e:
        print(f"Error generating PDF: {e}")
        # Fallback to text file
        return generate_text_report(articles, user_id, filename.replace('.pdf', '.txt'))

def generate_text_report(articles, user_id="guest", filename=None):
    """
    Generate a simple text report as fallback when PDF generation fails.
    
    Args:
        articles (list): List of article dictionaries
        user_id (str): User ID
        filename (str): Output filename (optional)
    
    Returns:
        str: Path to the generated text file
    """
    
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"news_recommendations_{user_id}_{timestamp}.txt"
    
    # Ensure the filename has .txt extension
    if not filename.endswith('.txt'):
        filename += '.txt'
    
    # Create a temporary directory if it doesn't exist
    temp_dir = os.path.join(os.path.dirname(__file__), '..', 'temp')
    os.makedirs(temp_dir, exist_ok=True)
    
    filepath = os.path.join(temp_dir, filename)
    
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(f"NEWS RECOMMENDATIONS FOR {user_id.upper()}\n")
            f.write("=" * 50 + "\n")
            f.write(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            for i, article in enumerate(articles, 1):
                f.write(f"{i}. {article.get('title', 'No Title Available')}\n")
                f.write("-" * 40 + "\n")
                f.write(f"Category: {article.get('category', 'Unknown')} / {article.get('subcategory', 'Unknown')}\n")
                f.write(f"Summary: {article.get('abstract', 'No abstract available.')}\n")
                f.write("\n")
            
            f.write("\n" + "=" * 50 + "\n")
            f.write("Generated by Smart News Recommendation System\n")
        
        return filepath
        
    except Exception as e:
        print(f"Error generating text report: {e}")
        return None

def cleanup_old_files(max_age_hours=24):
    """
    Clean up old generated files to save disk space.
    
    Args:
        max_age_hours (int): Maximum age of files to keep (in hours)
    """
    
    temp_dir = os.path.join(os.path.dirname(__file__), '..', 'temp')
    
    if not os.path.exists(temp_dir):
        return
    
    current_time = datetime.now()
    
    for filename in os.listdir(temp_dir):
        if filename.startswith('news_recommendations_'):
            filepath = os.path.join(temp_dir, filename)
            file_time = datetime.fromtimestamp(os.path.getctime(filepath))
            age_hours = (current_time - file_time).total_seconds() / 3600
            
            if age_hours > max_age_hours:
                try:
                    os.remove(filepath)
                    print(f"Cleaned up old file: {filename}")
                except Exception as e:
                    print(f"Error removing file {filename}: {e}")

# Export functions
__all__ = [
    'generate_pdf_from_articles',
    'generate_text_report', 
    'cleanup_old_files'
]
